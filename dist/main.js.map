{"version":3,"sources":["webpack://tic_tac_toe/./src/styles.scss?18b3","webpack://tic_tac_toe/webpack/bootstrap","webpack://tic_tac_toe/webpack/runtime/make namespace object","webpack://tic_tac_toe/./src/index.js"],"names":["Player","sign","gameBoard","board","findEmptyFields","filter","e","setField","index","getField","getAiField","aiBoard","randomNumber","Math","floor","random","length","reset","i","displayController","cells","document","querySelectorAll","playersMove","querySelector","restartBtn","forEach","addEventListener","textContent","gameController","gameOver","getSign","getAttribute","checkForGameOver","determineMove","alert","gameMode","getGameMode","oddRound","aiSign","aiField","minimaxSign","minimaxField","minimax","setPlayersMoveText","player","getWinnerSign","restartGame","setNewRound","playerOne","playerTwo","round","currentSign","winnerSign","isWin","checkWin","cell1","cell2","cell3","gameModes","mode","newBoard","availSpots","score","moves","move","result","push","bestMove","bestScore","console","log"],"mappings":"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","file":"main.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './styles.scss';\r\n\r\n// Create Player object(X, O) using factory function\r\nconst Player = (sign) => {\r\n    return { sign };\r\n}\r\n\r\nconst gameBoard = (() => {\r\n    // Create array that immitates tic tac toe board\r\n    const board = [0, 1, 2, 3, 4, 5, 6, 7, 8];\r\n\r\n    // Create new board with empty fields\r\n    const findEmptyFields = (board) => board.filter(e => e !== 'O' && e !== 'X');\r\n\r\n    // Assign elements to the board array\r\n    const setField = (index, sign) => {\r\n        board[index] = sign;\r\n    }\r\n\r\n    // Get value from the board array\r\n    const getField = (index) => board[index];\r\n\r\n    // Select random empty field and return its value\r\n    // returned value is field index in original board\r\n    const getAiField = () => {\r\n        const aiBoard = findEmptyFields(board);\r\n        \r\n        const randomNumber = Math.floor(\r\n            Math.random() * aiBoard.length\r\n        );\r\n\r\n        return aiBoard[randomNumber];\r\n        //return board[randomNumber] !== '' ? getAiField() : randomNumber;\r\n    }\r\n\r\n    // clear board array\r\n    const reset = () => {\r\n        for(let i = 0; i < board.length; i++) {\r\n            board[i] = i;\r\n        }\r\n    }\r\n\r\n    return { board, setField, getField, findEmptyFields, getAiField, reset };\r\n})();\r\n\r\nconst displayController = (() => {\r\n    const cells = [...document.querySelectorAll('#gameBoard div')];\r\n    const playersMove = document.querySelector('#playersMove');\r\n    const restartBtn = document.querySelector('#restart');\r\n\r\n    // on click check if field is empty and if game is not over\r\n    cells.forEach(e => e.addEventListener('click', () => {\r\n        if (e.textContent === '' && gameController.gameOver() === false) {\r\n            e.textContent = gameController.getSign();\r\n\r\n            // add placed sign to the board array\r\n            gameBoard.setField(e.getAttribute('data-position'), e.textContent);\r\n\r\n            // after players move check if game is not over\r\n            checkForGameOver();\r\n\r\n            // after check for game mode, if it's AI mode - AI will place its sign\r\n            determineMove();\r\n        }\r\n\r\n        // set alert if game is still going but selected field was already taken\r\n        else if (gameController.gameOver() === false) { \r\n            alert('This cell is already taken, please select another one'); \r\n        }\r\n\r\n        // if game is over and user tries to click on field - set alert to restart the game\r\n        else { \r\n            alert(`Game is Over, please restart`); \r\n        }\r\n    }));\r\n\r\n    // check the gamemode, if it's AI mode - AI makes its move, \r\n    const determineMove = () => {\r\n        if (gameController.gameOver() === false && gameMode.getGameMode() === 'ai' && gameController.oddRound() === false) { \r\n\r\n            // set AI's sign and get empty field that will be choosen\r\n            const aiSign = gameController.getSign(); \r\n            const aiField = gameBoard.getAiField();\r\n\r\n            // change DOM content and place new value into board array\r\n            cells[aiField].textContent = aiSign;\r\n            gameBoard.setField(aiField, aiSign);\r\n\r\n            // check for gameover after AI finishes move\r\n            checkForGameOver();\r\n        }\r\n\r\n        // minimax mode\r\n        else if (gameController.gameOver() === false && gameMode.getGameMode() === 'minimax' && gameController.oddRound() === false) { \r\n            const minimaxSign = gameController.getSign(); \r\n            const minimaxField = minimax(gameBoard.board, minimaxSign);\r\n\r\n            cells[minimaxField.index].textContent = minimaxSign;\r\n            gameBoard.setField(minimaxField.index, minimaxSign);\r\n\r\n            checkForGameOver();\r\n        }\r\n    }\r\n\r\n    // set text that tells which player moves right now\r\n    const setPlayersMoveText = player => {\r\n        playersMove.textContent = `Player ${player}'s Turn`;\r\n    }\r\n\r\n    const checkForGameOver = () => {\r\n        if(gameController.gameOver() === true) {\r\n            playersMove.textContent = `Player ${gameController.getWinnerSign()} Has Won`;\r\n        } else if (gameController.gameOver() === \"tie\") {\r\n            playersMove.textContent = `That's a tie`;\r\n        }\r\n    }\r\n\r\n    const restartGame = () => {\r\n        gameBoard.reset();\r\n        gameController.setNewRound();\r\n        playersMove.textContent = `Player X's Turn`;\r\n        for (let i=0; i<cells.length; i++) {\r\n            cells[i].textContent = '';\r\n        }\r\n    }\r\n\r\n    restartBtn.addEventListener('click', restartGame);\r\n\r\n    return { setPlayersMoveText, restartGame };\r\n})();\r\n\r\nconst gameController = (() => {\r\n    const playerOne = Player('X');\r\n    const playerTwo = Player('O');\r\n    let round = 1;\r\n    let currentSign = null;\r\n    let winnerSign = null;\r\n    let isWin = false;\r\n\r\n    const getSign = () => {\r\n        if (round % 2 === 0) {\r\n            currentSign = playerTwo.sign;\r\n            displayController.setPlayersMoveText(playerOne.sign);\r\n        }\r\n        else {\r\n            currentSign = playerOne.sign;\r\n            displayController.setPlayersMoveText(playerTwo.sign);\r\n        }\r\n        round++;\r\n        return currentSign;\r\n    }\r\n\r\n    const getWinnerSign = () => winnerSign;\r\n\r\n    // chick if round number is odd\r\n    const oddRound = () => round % 2 === 0 ? false : true;\r\n\r\n    const setNewRound = () => round = 1;\r\n\r\n    // we take 3 board fields if each field has same value then game was won\r\n    const checkWin = (cell1, cell2, cell3) => {\r\n        if (gameBoard.getField(cell1) === gameBoard.getField(cell2) && \r\n            gameBoard.getField(cell1) === gameBoard.getField(cell3)) {\r\n            winnerSign = gameBoard.getField(cell1);\r\n            return true;\r\n        }\r\n        else { \r\n            return false;\r\n        }\r\n    }\r\n\r\n    // we call checkWin function and pass field indexes into it\r\n    // if checkWin returns true - player won\r\n    // if it was final round and nobody won than it's a tie\r\n    const gameOver = () => {\r\n        isWin = checkWin(0,1,2)\r\n            || checkWin(3,4,5)\r\n            || checkWin(6,7,8)\r\n            || checkWin(0,3,6)\r\n            || checkWin(1,4,7)\r\n            || checkWin(2,5,8)\r\n            || checkWin(0,4,8)\r\n            || checkWin(6,4,2);\r\n        if (round === 10 && isWin === false) {\r\n            isWin = \"tie\";\r\n        }\r\n        return isWin;\r\n    }\r\n\r\n    return { getSign, getWinnerSign, oddRound, setNewRound, gameOver };\r\n})();\r\n\r\nconst gameMode = (() => {\r\n    const gameModes = [...document.querySelectorAll('#gameMode')];\r\n    let mode = 'human';\r\n    \r\n    // on button click set gamemode to the selected one\r\n    gameModes.forEach(e => e.addEventListener('click', () => {\r\n        displayController.restartGame();\r\n        mode = e.getAttribute('data-mode');\r\n    }));\r\n\r\n    const getGameMode = () => mode;\r\n    \r\n    return { getGameMode };\r\n})();\r\n\r\nconst minimax = (newBoard, player) => {\r\n    // available spots\r\n    const availSpots = gameBoard.findEmptyFields(newBoard);\r\n\r\n    // checks for the terminal states such as win, lose, and tie and returning a value accordingly\r\n    if (gameController.gameOver() === true && gameController.getWinnerSign() === 'X') {\r\n        return { score: -10 };\r\n    }\r\n    else if (gameController.gameOver() === true && gameController.getWinnerSign() === 'O') {\r\n        return { score: 10 };\r\n    }\r\n    else if (availSpots.length === 0) {\r\n        return { score: 0 };\r\n    }\r\n\r\n    // an array to collect all the objects\r\n    const moves = [];\r\n\r\n    // loop through available spots\r\n    for (let i = 0; i < availSpots.length; i++) {\r\n        // create an object for each and store the index of that spot that was stored as a number in the object's index key\r\n        const move = {};\r\n        move.index = newBoard[availSpots[i]];\r\n\r\n        // set the empty spot to the current player\r\n        newBoard[availSpots[i]] = player;\r\n\r\n        // if collect the score resulted from calling minimax on the opponent of the current player\r\n        if (player === 'O') {\r\n            const result = minimax(newBoard, 'X');\r\n            move.score = result.score;\r\n        }\r\n        else {\r\n            const result = minimax(newBoard, 'O');\r\n            move.score = result.score;\r\n        }\r\n\r\n        // reset the spot to empty\r\n        newBoard[availSpots[i]] = move.index;\r\n\r\n        // push the object to the array\r\n        moves.push(move);\r\n    }\r\n    \r\n    // if it is the computer's turn loop over the moves and choose the move with the highest score\r\n    let bestMove;\r\n\r\n    if (player === 'O'){\r\n        let bestScore = -10000;\r\n        for (let i = 0; i < moves.length; i++){\r\n        if (moves[i].score > bestScore){\r\n            bestScore = moves[i].score;\r\n            bestMove = i;\r\n        }\r\n        }\r\n    } else {\r\n\r\n    // else loop over the moves and choose the move with the lowest score\r\n        let bestScore = 10000;\r\n        for (let i = 0; i < moves.length; i++){\r\n        if (moves[i].score < bestScore){\r\n            bestScore = moves[i].score;\r\n            bestMove = i;\r\n        }\r\n        }\r\n    }\r\n\r\n    // return the chosen move (object) from the array to the higher depth\r\n    console.log(moves[bestMove]);\r\n    return moves[bestMove];\r\n}"],"sourceRoot":""}