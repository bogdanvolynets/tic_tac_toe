{"version":3,"sources":["webpack://tic_tac_toe/./src/styles.scss?18b3","webpack://tic_tac_toe/webpack/bootstrap","webpack://tic_tac_toe/webpack/runtime/make namespace object","webpack://tic_tac_toe/./src/index.js"],"names":["Player","sign","gameBoard","board","getBoard","findEmptyFields","filter","e","setField","index","getField","getAiField","aiBoard","randomNumber","Math","floor","random","length","reset","i","displayController","cells","document","querySelectorAll","playersMove","querySelector","restartBtn","forEach","addEventListener","textContent","gameController","gameOver","getSign","getAttribute","checkForGameOver","determineMove","alert","gameMode","getGameMode","aiSign","aiField","minimaxSign","minimaxField","aiController","minimax","setPlayersMoveText","player","getWinnerSign","restartGame","setNewRound","aiMovesFirst","playerOne","playerTwo","round","currentSign","winnerSign","isWin","setNextRound","checkWin","cell1","cell2","cell3","gameModes","signsDOM","mode","classList","add","remove","xSign","oSign","huSign","aiMove","newBoard","availSpots","score","moves","move","result","push","bestMove","bestScore","console","log"],"mappings":"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","file":"main.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './styles.scss';\r\n\r\n// Create Player object(X, O) using factory function\r\nconst Player = (sign) => {\r\n    return { sign };\r\n}\r\n\r\nconst gameBoard = (() => {\r\n    // Create array that immitates tic tac toe board\r\n    const board = [0, 1, 2, 3, 4, 5, 6, 7, 8];\r\n\r\n    const getBoard = () => board;\r\n\r\n    // Create board with empty fields only\r\n    const findEmptyFields = () => board.filter(e => e !== 'O' && e !== 'X');\r\n\r\n    // Assign elements to the board array\r\n    const setField = (index, sign) => {\r\n        board[index] = sign;\r\n    }\r\n\r\n    // Get value from the board array\r\n    const getField = (index) => board[index];\r\n\r\n    // Select random empty field and return its value\r\n    // returned value is field index in original board\r\n    const getAiField = () => {\r\n        const aiBoard = findEmptyFields();\r\n        const randomNumber = Math.floor(\r\n            Math.random() * aiBoard.length\r\n        );\r\n        return aiBoard[randomNumber];\r\n    }\r\n\r\n    // clear board array\r\n    const reset = () => {\r\n        for(let i = 0; i < board.length; i++) {\r\n            board[i] = i;\r\n        }\r\n    }\r\n\r\n    return { getBoard, setField, getField, findEmptyFields, getAiField, reset };\r\n})();\r\n\r\nconst displayController = (() => {\r\n    const cells = [...document.querySelectorAll('#gameBoard div')];\r\n    const playersMove = document.querySelector('#playersMove');\r\n    const restartBtn = document.querySelector('#restart');\r\n\r\n    // on click check if field is empty and if game is not over\r\n    cells.forEach(e => e.addEventListener('click', () => {\r\n        if (e.textContent === '' && gameController.gameOver() === false) {\r\n            e.textContent = gameController.getSign();\r\n\r\n            // add placed sign to the board array\r\n            gameBoard.setField(e.getAttribute('data-position'), e.textContent);\r\n\r\n            // after players move check if game is not over\r\n            checkForGameOver();\r\n\r\n            // after check for game mode, if it's AI mode - AI will place its sign\r\n            determineMove();\r\n        }\r\n\r\n        // set alert if game is still going but selected field was already taken\r\n        else if (gameController.gameOver() === false) { \r\n            alert('This cell is already taken, please select another one'); \r\n        }\r\n\r\n        // if game is over and user tries to click on field - set alert to restart the game\r\n        else { \r\n            alert(`Game is Over, please restart`); \r\n        }\r\n    }));\r\n\r\n    // check the gamemode, if it's AI mode - AI makes its move, \r\n    const determineMove = () => {\r\n        if ((gameController.gameOver() === false && gameMode.getGameMode() === 'ai') \r\n        || (gameMode.getGameMode() === 'minimax' && gameBoard.findEmptyFields().length === 9)) { \r\n\r\n            // set AI's sign and get empty field that will be choosen\r\n            const aiSign = gameController.getSign(); \r\n            const aiField = gameBoard.getAiField();\r\n\r\n            // change DOM content and place new value into board array\r\n            cells[aiField].textContent = aiSign;\r\n            gameBoard.setField(aiField, aiSign);\r\n\r\n            // check for gameover after AI finishes move\r\n            checkForGameOver();\r\n        }\r\n\r\n        // minimax mode\r\n        else if (gameController.gameOver() === false && gameMode.getGameMode() === 'minimax') { \r\n            const minimaxSign = gameController.getSign(); \r\n            const minimaxField = aiController.minimax(gameBoard.getBoard(), minimaxSign);\r\n\r\n            cells[minimaxField.index].textContent = minimaxSign;\r\n            gameBoard.setField(minimaxField.index, minimaxSign);\r\n\r\n            checkForGameOver();\r\n        }\r\n    }\r\n\r\n    // set text that tells which player moves right now\r\n    const setPlayersMoveText = player => {\r\n        playersMove.textContent = `Player ${player}'s Turn`;\r\n    }\r\n\r\n    const checkForGameOver = () => {\r\n        if(gameController.gameOver() === true) {\r\n            playersMove.textContent = `Player ${gameController.getWinnerSign()} Has Won`;\r\n        } else if (gameController.gameOver() === \"tie\") {\r\n            playersMove.textContent = `That's a tie`;\r\n        }\r\n    }\r\n\r\n    const restartGame = () => {\r\n        gameBoard.reset();\r\n        gameController.setNewRound();\r\n        playersMove.textContent = `Player X's Turn`;\r\n        for (let i = 0; i < cells.length; i++) {\r\n            cells[i].textContent = '';\r\n        }\r\n\r\n        // if it's AI mode and AI plays X - AI makes its move\r\n        if (aiController.aiMovesFirst()) {\r\n            determineMove();\r\n        }\r\n    }\r\n\r\n    restartBtn.addEventListener('click', restartGame);\r\n\r\n    return { setPlayersMoveText, restartGame };\r\n})();\r\n\r\nconst gameController = (() => {\r\n    const playerOne = Player('X');\r\n    const playerTwo = Player('O');\r\n    let round = 1;\r\n    let currentSign = null;\r\n    let winnerSign = null;\r\n    let isWin = false;\r\n\r\n    const getSign = () => {\r\n        if (round % 2 === 0) {\r\n            currentSign = playerTwo.sign;\r\n            displayController.setPlayersMoveText(playerOne.sign);\r\n        }\r\n        else {\r\n            currentSign = playerOne.sign;\r\n            displayController.setPlayersMoveText(playerTwo.sign);\r\n        }\r\n        setNextRound();\r\n        return currentSign;\r\n    }\r\n\r\n    const getWinnerSign = () => winnerSign;\r\n\r\n    const setNextRound = () => round++;\r\n\r\n    const setNewRound = () => round = 1;\r\n\r\n    // we take 3 board fields if each field has same value then game was won\r\n    // we also set winners sign\r\n    const checkWin = (cell1, cell2, cell3) => {\r\n        if (gameBoard.getField(cell1) === gameBoard.getField(cell2) && \r\n            gameBoard.getField(cell1) === gameBoard.getField(cell3)) {\r\n            winnerSign = gameBoard.getField(cell1);\r\n            return true;\r\n        }\r\n        else { \r\n            return false;\r\n        }\r\n    }\r\n\r\n    // we call checkWin function and pass field indexes into it\r\n    // if checkWin returns true - player won\r\n    // if it was final round and nobody won than it's a tie\r\n    const gameOver = () => {\r\n        isWin = checkWin(0,1,2)\r\n            || checkWin(3,4,5)\r\n            || checkWin(6,7,8)\r\n            || checkWin(0,3,6)\r\n            || checkWin(1,4,7)\r\n            || checkWin(2,5,8)\r\n            || checkWin(0,4,8)\r\n            || checkWin(6,4,2);\r\n        if (round === 10 && isWin === false) {\r\n            isWin = \"tie\";\r\n        }\r\n        return isWin;\r\n    }\r\n\r\n    return { getSign, getWinnerSign, setNewRound, gameOver };\r\n})();\r\n\r\nconst gameMode = (() => {\r\n    const gameModes = [...document.querySelectorAll('#gameMode')];\r\n    const signsDOM = document.querySelector('#signs');\r\n    let mode = 'human';\r\n    \r\n    // on button click set gamemode to the selected one\r\n    // also display sign selection if gamemode is ai\r\n    gameModes.forEach(e => e.addEventListener('click', () => {\r\n        mode = e.getAttribute('data-mode');\r\n        if (mode === 'ai' || mode === 'minimax') {\r\n            signsDOM.classList.add('signs__active');\r\n        } else {\r\n            signsDOM.classList.remove('signs__active');\r\n        }\r\n        displayController.restartGame();\r\n    }));\r\n\r\n    const getGameMode = () => mode;\r\n    \r\n    return { getGameMode };\r\n})();\r\n\r\nconst aiController = (() => {\r\n    const xSign = document.querySelector('#xSign');\r\n    const oSign = document.querySelector('#oSign');\r\n\r\n    // set default signs\r\n    let huSign = 'X';\r\n    let aiSign = 'O';\r\n    let aiMove = false;\r\n\r\n    const aiMovesFirst = () => aiMove;\r\n\r\n    xSign.addEventListener('click', () => {\r\n        huSign = 'X';\r\n        aiSign = 'O';\r\n        aiMove = false;\r\n        displayController.restartGame();\r\n    });\r\n\r\n    oSign.addEventListener('click', () => {\r\n        huSign = 'O';\r\n        aiSign = 'X';\r\n        aiMove = true;\r\n        displayController.restartGame();\r\n    });\r\n\r\n    const minimax = (newBoard, player) => {\r\n        // available spots\r\n        const availSpots = gameBoard.findEmptyFields();\r\n\r\n        // checks for the terminal states such as win, lose, and tie and returning a value accordingly\r\n        if (gameController.gameOver() === true && gameController.getWinnerSign() === huSign) {\r\n            return { score: -10 };\r\n        }\r\n        else if (gameController.gameOver() === true && gameController.getWinnerSign() === aiSign) {\r\n            return { score: 10 };\r\n        }\r\n        else if (availSpots.length === 0) {\r\n            return { score: 0 };\r\n        }\r\n\r\n        // an array to collect all the objects\r\n        const moves = [];\r\n\r\n        // loop through available spots\r\n        for (let i = 0; i < availSpots.length; i++) {\r\n            // create an object for each and store the index of that spot that was stored as a number in the object's index key\r\n            const move = {};\r\n            move.index = newBoard[availSpots[i]];\r\n\r\n            // set the empty spot to the current player\r\n            newBoard[availSpots[i]] = player;\r\n\r\n            // if collect the score resulted from calling minimax on the opponent of the current player\r\n            if (player === aiSign) {\r\n                const result = minimax(newBoard, huSign);\r\n                move.score = result.score;\r\n            }\r\n            else {\r\n                const result = minimax(newBoard, aiSign);\r\n                move.score = result.score;\r\n            }\r\n\r\n            // reset the spot to empty\r\n            newBoard[availSpots[i]] = move.index;\r\n\r\n            // push the object to the array\r\n            moves.push(move);\r\n        }\r\n        \r\n        // if it is the computer's turn loop over the moves and choose the move with the highest score\r\n        let bestMove;\r\n\r\n        if (player === aiSign){\r\n            let bestScore = -10000;\r\n            for (let i = 0; i < moves.length; i++){\r\n            if (moves[i].score > bestScore){\r\n                bestScore = moves[i].score;\r\n                bestMove = i;\r\n            }\r\n            }\r\n        } else {\r\n\r\n        // else loop over the moves and choose the move with the lowest score\r\n            let bestScore = 10000;\r\n            for (let i = 0; i < moves.length; i++){\r\n            if (moves[i].score < bestScore){\r\n                bestScore = moves[i].score;\r\n                bestMove = i;\r\n            }\r\n            }\r\n        }\r\n\r\n        // return the chosen move (object) from the array to the higher depth\r\n        console.log(moves[bestMove]);\r\n        return moves[bestMove];\r\n    }\r\n\r\n    return { aiMovesFirst, minimax }\r\n})();"],"sourceRoot":""}